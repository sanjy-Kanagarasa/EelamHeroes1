@page "/admin/hero-image/{heroId}"
@attribute [Authorize(Roles = "Admin")]

@using EelamHeroes.Models.Entity
@using EelamHeroes.Models.ViewModel
@using EelamHeroes.Repository.Interface
@using Radzen
@using AutoMapper

@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject IGeneralRepository Repository
@inject IHeroRepository HeroRepository
@inject IMapper Mapper


@if (model == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="container">
        <RadzenNotification />
        <RadzenTemplateForm TItem="HeroAddOrUpdateViewModel" Data="@model" Submit="@OnSubmit">
            <RadzenFieldset Text="@($"{model.RealName}")">

                <div class="row" style="margin-bottom: 20px">
                    <div class="col">

                        <RadzenUpload Accept="image/*" Url="@($"upload/hero/{HeroId}")" Style="margin-bottom: 20px;"
                                      Complete="@Completed" />
                        @if (!string.IsNullOrEmpty(HeroId))
                        {
                            <RadzenImage src="@($"images/hero/{HeroId}.jpg")" Style="max-width:200px">
                            </RadzenImage>
                        }
                    </div>
                </div>
            </RadzenFieldset>
        </RadzenTemplateForm>
    </div>
}

@code {
    private HeroAddOrUpdateViewModel model;


    [Parameter]
    public string HeroId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HeroId == "new")
        {
            model = new HeroAddOrUpdateViewModel();
        }
        else
        {
            var hero = await HeroRepository.GetById(int.Parse(HeroId));
            model = Mapper.Map<HeroAddOrUpdateViewModel>(hero);
        }
    }
    async Task OnSubmit(HeroAddOrUpdateViewModel model)
    {
        try
        {
            await HeroRepository.AddOrUpdate(model);
            var message = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Successfully updated!",
                Duration = 4000
            };
            NotificationService.Notify(message);
        }
        catch
        {

            var message = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Something went wrong!",
                Duration = 4000
            };
            NotificationService.Notify(message);
        }
    }

    void Completed(UploadCompleteEventArgs args)
    {

        Navigation.NavigateTo("hero/" + HeroId, true);
        //model.ImagePath = args.RawResponse;
    }

}