@page "/admin/hero-image/{heroId}"
@attribute [Authorize(Roles = "Admin")] 

@using EelamHeroes.Models.Entity
@using EelamHeroes.Models.ViewModel
@using EelamHeroes.Repository.Interface
@using Radzen
@using AutoMapper
@using Microsoft.AspNetCore.Http.Extensions

@inject IGeneralRepository Repository
@inject IHeroRepository HeroRepository
@inject IMapper Mapper
@inject NavigationManager NavigationManager


@if (model == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="container">
        <RadzenNotification/>
        <RadzenTemplateForm TItem="HeroAddOrUpdateViewModel" Data="@model" Submit="@OnSubmit">
            <RadzenFieldset Text="@($"{model.RealName}")">

                <div class="row" style="margin-bottom: 20px">
                    <div class="col">

                        <RadzenUpload Accept="image/*" Url="@($"upload/hero/{HeroId}")" Style="margin-bottom: 20px;"
                                      Complete="@Completed"/>
                        @if (!string.IsNullOrEmpty(" rgr"))
                        {
                            <RadzenImage src="@($"images/hero/{HeroId}.jpg")" onerror="this.src='images/hero/default.jpg'" Style="max-width:200px">
                            </RadzenImage>
                        }
                    </div>
                </div>
            </RadzenFieldset>
        </RadzenTemplateForm>
    </div>
}

@code {
    private HeroAddOrUpdateViewModel model;

    string headerText;

    [Parameter]
    public string HeroId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HeroId == "new")
        {
            headerText = "Add new hero";
            model = new HeroAddOrUpdateViewModel();
        }
        else
        {
            headerText = "Edit hero";
            var hero = await HeroRepository.GetById(int.Parse(HeroId));
            model = Mapper.Map<HeroAddOrUpdateViewModel>(hero);
        }
    }

    void OnSubmit(HeroAddOrUpdateViewModel model)
    {
        HeroRepository.AddOrUpdate(model);
    }

    void Completed(UploadCompleteEventArgs args)
    {
        
        NavigationManager.NavigateTo("hero/" + HeroId, true);
    //model.ImagePath = args.RawResponse;
    }

}